"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для третьего скрипта
"""
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


# Практическое задание из 1 урока курса по основам.
@decor
def capitalize_list():
    raw_data = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй',
                'директор аэлита']
    # Вариант с промежуточным списком
    for i in raw_data:
        _words = i.split(' ')
        print("Привет, " + _words[-1].capitalize() + "!")


res, mem_diff = capitalize_list()
print(f"Выполнение заняло {mem_diff} Mib")


# Выполнение заняло 0.015625 Mib

@decor
def capitalize_list_opt():
    raw_data = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй',
                'директор аэлита']
    # Вариант с промежуточным списком
    for i in raw_data:
        _words = i.split(' ')
        print(f'Привет, {_words[-1].capitalize()}!')


res, mem_diff = capitalize_list_opt()
print(f"Выполнение заняло {mem_diff} Mib")
# Выполнение заняло 0.0 Mib
# Для оптимизации использовал замену конкатенации на f-строку. Произошло значительное сокращение используемой памяти
