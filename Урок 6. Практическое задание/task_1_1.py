"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


# Практическое задание из урока 3 курса по алгоритмам
@decor
def list_fill(list_example, n):
    for i in range(n):
        list_example.append(i)
    return list_example


# Оптимизация использования памяти. Используем генератор
def gen_opt(n):
    for i in range(n):
        yield i


@decor
def list_fill_opt(list_example, n):
    gen = gen_opt(n)
    for i in gen:
        list_example.append(i)


list_example = []
n = 1000000

# заполнение списка
res, mem_diff = list_fill(list_example, n)

print(f"Выполнение заняло {mem_diff} Mib")
# Выполнение заняло 38.91015625 Mib

# заполнение списка
gen, mem_diff = list_fill_opt(list_example, n)

print(f"Выполнение оптимизированной функции заняло {mem_diff} Mib")
# Выполнение оптимизированной функции заняло 38.2421875 Mib
# Для оптимизации использовал генератор. Произошло не значительное сокращение объема занимаемой памяти
