"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.

Решите через рекурсию. В задании нельзя применять циклы.

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_and_uneven_numerics(numeric, even=0, uneven=0):
    remainder = numeric % 10
    division_result = numeric // 10

    if remainder % 2 == 0:
        even += 1
    else:
        uneven += 1
    if division_result == 0:

        print(f'Количество четных и нечетных цифр в числе равно: {even}, {uneven}')
    else:
        even_and_uneven_numerics(division_result, even, uneven)


even_and_uneven_numerics(34560)

even_and_uneven_numerics(123)
